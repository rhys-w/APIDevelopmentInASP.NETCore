How Does HTTP Work?

Request sent, containing:
- verb, the action to take 	e.g. POST
- headers, information about the request
- content, optionally asked for

Example:
VERB		POST
HEADERS		Content Length: 11
CONTENT		Hello World

Get a response back, containing:
- status code
- headers
- content

Example:
STATUS CODE	201
HEADERS		Content Type: text
CONTENT 	Hello World

The Server:
- Stateless
- This enables scaling

Requests:
GET:	Request Resource
POST:	Create Resource
PUT:	Update Resource
PATCH:  Update Partial Resource e.g. Part X of resource Y
DELETE: Delete Resource
(there are more)

Headers:
- Metadata
- Name value pairs

Header examples:
- Content Type: The format of content
- Content Length: Size of content
- Auth: Who is making the call
- Accept: What type(s) can accept
(there are lots more)

Content Concerning Request:
- HTML, CSS, JavaSript, XML, JSON
- Content is not valid with some verbs
- Information to help fulfill request
- Binary and blobs common (e.g. .jpg)

Response Codes:
- 100-199: Informational
- 200-299: Success
- 300-399: Redirection
- 400-499: Client Errors
- 500-599: Server Errors

What is REST?
- REpresentational State Transfer
- Separation of Client and Server
- Server Requests are Stateless
- Cacheable Requests
- Uniform Interface


API DESIGN:

Api Design
- Nouns are Good, Verbs are Bad
- Prefer Nouns e.g. customers, invoivces, products, employees
- Nouns contain resources 
- Prefer plurals e.g. customers not customer.

Resources (What are they?):
- People, Invoices, Products
- Nouns you want to expose through the API
- A resource can be a complex object within a given context
	(Not necessarily just one entity)

Identifiers in URI's
- Use unique identifiers
- Does not have to be 'primary keys'

Query Strings
- Use for non-resource properties
	e.g. sorts, pages, formats


Verbs and URI's

How do I do Verbs then?

Resource: Customers

/customers
Get: Get List
Post: New Customer
Put: Update Batch (rare)
Delete: Error

/customers/123
Get: Get Item
Post: Error
Put: Update Item
Delete: Delete Item

Idempotency
- Operations result in same side effect
- Get should return the same data, assuming no data has changed
- Put should make the changes if needed
- Patch should make the change if needed
- Delete should delete the resource if it exists
- EXCEPTION: Post is not idempotent

Hypermedia:
- An idea as part of what REST wants you to do
- Allows results to be self describing
- Allows programmatic navigation of API endpoints
- Adds complexity

Associations:

- Sub objects for existing API's
	- e.g. invoices for a customer 
		/api/customers/123/invoices
	- e.g. ratings for a specific game 
		/api/games/halo-3/ratings
	- e.g. payments related to a specific invoice
		/api/invoices/2003-01-24/payments

- Should return lists with the same shape, in different scopes
	/api/customers/123/invoices
	/api/invoices
	These both return a list of the same shape, just with different scopes

- Endpoints can have multiple associations
	/api/customers/123/invoices
	/api/customers/123/payments
	/api/customers/123/shipments

- Search should use queries
- Don't use associations to get things like...
	- 'all customers in a state'
		/api/customers?st=GA
	- 'all customers with sales id in state'
		/api/customers?st=GA&salesid=144

Paging:

- Lists should support paging
- Query strings are commonly used:
	/api/sites?page=1&page_size=25
- Use wrappers to imply paging:
	{
		totalResults: 255,
		nextPage: "api/sites?page=5"
		prevPage: "api/sites?page=3"
		results: [...]
	}